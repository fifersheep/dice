create schema if not exists private;

grant usage on schema private to postgres, anon, authenticated, service_role;
alter default privileges in schema private grant all on tables to postgres, anon, authenticated, service_role;
alter default privileges in schema private grant all on functions to postgres, anon, authenticated, service_role;
alter default privileges in schema private grant all on sequences to postgres, anon, authenticated, service_role;

alter default privileges for user supabase_admin in schema private grant all
    on sequences to postgres, anon, authenticated, service_role;
alter default privileges for user supabase_admin in schema private grant all
    on tables to postgres, anon, authenticated, service_role;
alter default privileges for user supabase_admin in schema private grant all
    on functions to postgres, anon, authenticated, service_role;

drop table if exists private.game_participation_uuids;
drop table if exists private.participation_dice;
drop table if exists public.participations;
drop table if exists public.games;
drop table if exists public.players;
drop type if exists public.game_status;

create type public.game_status as enum (
    'Created',
    'Rolling',
    'InPlay',
    'Ended'
);

create table public.games (
    id bigint generated by default as identity primary key,
    name text not null,
    status game_status not null,
    player_order bigint ARRAY,
    current_player_id bigint
);

create table public.players (
    id bigint generated by default as identity primary key,
    name text not null
);

create table public.participations (
    game_id bigint not null,
    player_id bigint not null,
    player_ready boolean not null default false,
    dice_quantity smallint,
    bet_quantity smallint,
    bet_value smallint,
    primary key (game_id, player_id),
    constraint fk_game_id
        foreign key(game_id)
        references games(id),
    constraint fk_player_id
        foreign key(player_id)
        references players(id)
);

create table private.participation_dice (
    id uuid primary key default uuid_generate_v4(),
    dice smallint array not null default array[]::smallint[]
);

create table private.game_participation_uuids (
    game_id bigint not null,
    participation_dice_id uuid not null,
    primary key (game_id, participation_dice_id),
    constraint fk_participation_dice_id
        foreign key(participation_dice_id)
        references private.participation_dice(id)
);

alter publication supabase_realtime add table games;
alter publication supabase_realtime add table players;
alter publication supabase_realtime add table participations;

comment on table games is 'The available, active, and completed games.';
comment on column games.name is 'The name of the game.';
comment on column games.status is 'The status of the game.';
comment on column games.player_order is 'The order of play for the game.';
comment on column games.current_player_id is 'The currently active player id for the game.';

comment on table players is 'All players in all games.';
comment on column players.name is 'A player name.';

comment on table public.participations is 'Participations - a player in a particular game and their public play details.';
comment on column public.participations.game_id is 'The game id that this participation is for.';
comment on column public.participations.player_id is 'The player id for this participation.';
comment on column public.participations.player_ready is 'Whether this player is ready for this participation.';
comment on column public.participations.bet_quantity is 'The current bet quantity for this participation.';
comment on column public.participations.bet_value is 'The current bet value this participation.';

comment on table private.participation_dice is 'Participation Dice - a player in a particular game and their private play details.';
comment on column private.participation_dice.id is 'A unique id for this participation.';
comment on column private.participation_dice.dice is 'The player dice for this participation.';

comment on table private.game_participation_uuids is 'Game Participation UUIDs - mapping participations UUIDs to game ids.';
comment on column private.game_participation_uuids.game_id is 'The game id associated with the participations UUID.';
comment on column private.game_participation_uuids.participation_dice_id is 'The participation dice id.';
